{"/home/travis/build/npmtest/node-npmtest-wifiscanner/test.js":"/* istanbul instrument in package npmtest_wifiscanner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wifiscanner/lib.npmtest_wifiscanner.js":"/* istanbul instrument in package npmtest_wifiscanner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wifiscanner = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wifiscanner = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wifiscanner/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wifiscanner && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wifiscanner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wifiscanner\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wifiscanner.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wifiscanner.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wifiscanner.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wifiscanner.__dirname + '/lib.npmtest_wifiscanner.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wifiscanner/node_modules/wifiscanner/index.js":"'use strict';\n\nconst WiFiScanner = require('./scanners/wifiscanner');\nconst darwinparser = require('./parsers/darwinparser');\nconst linuxparser = require('./parsers/linuxparser');\nconst windowsparser = require('./parsers/windowsparser');\nconst nconf = require(\"nconf\");\n\nfunction platformSelect(options) {\n    let platform;\n    if(options && options.platform) {\n        platform = options.platform;\n        delete options.platform;\n    }\n    return platform || process.platform;\n}\n\nfunction scanner(options) {\n    options = options || {}\n    const platform = platformSelect(options);\n    nconf.file(`${__dirname}/config/${platform}.json`);\n    \n    let parser;\n    switch(platform) {\n        case \"linux\":\n            parser = linuxparser;\n        break;        \n        case \"darwin\":\n            parser = darwinparser;\n        break;\n        case \"win32\":\n            parser = windowsparser;\n        break;\n    }\n    \n    const scannerOptions = {\n        binaryPath: options.binaryPath || nconf.get(\"binaryPath\"),\n        args: options.args || nconf.get(\"args\"),\n    }\n    return new WiFiScanner(scannerOptions, parser);\n};\n\nmodule.exports = scanner;","/home/travis/build/npmtest/node-npmtest-wifiscanner/node_modules/wifiscanner/scanners/wifiscanner.js":"'use strict';\n\nconst childProcess = require(\"child_process\");\n\nmodule.exports = class WifiScanner {\n    constructor(options, parser) {\n        this.parser = parser;\n        this.options = options;\n\t}\t\n    \n\tscan(callback, standardErrorCallback) {\n        childProcess.exec(this.command,  (error, standardOut, standardError) => {\n            if (standardError && typeof standardErrorCallback === \"function\") {\n                standardErrorCallback(standardError);\n            }\n            callback(error, this.parse(standardOut.toString()));\n        });\n    }\n\t\n\tget command() {\n\t\treturn this.options.binaryPath + \" \" + this.options.args;\n\t}\n\n    parse(data) {\n        return this.parser(data);\n    }\n}","/home/travis/build/npmtest/node-npmtest-wifiscanner/node_modules/wifiscanner/parsers/darwinparser.js":"'use strict';\n\nmodule.exports = function parse(data) {\n    var lines = data.split(\"\\n\");\n    var headers = lines.shift();\n    var indexOfMacAddress = headers.indexOf(\"BSSID\");\n    return lines.filter(filterBlanks).map(function(line){\n        return parseLine(line, indexOfMacAddress);\n    });\n}\n\nfunction cleanSecurity(security) {\n    if(security.toLowerCase() === \"none\") {\n        return \"None\";\n    } else {\n        return security.split(\"(\")[0];\n    }\n}\n\n\nfunction filterBlanks(line) {\n    return line.replace(/\\s+/g,\"\").length !== 0;\n}\n\nfunction parseLine(line, indexOfMacAddress) {\n    var ssid = line.substr(0, indexOfMacAddress).trim();\n    line = line.substr(indexOfMacAddress, line.length - indexOfMacAddress);\n\n    var components = line.replace(/\\s{1,}/g, \" \").trim().split(\" \");\n    //[0] SSID\n    //[1] MAC\n    //[2] RSSI\n    //[3] CHANNEL\n    //[4] HT\n    //[5] CC\n    //[6..x] SECURITY (auth/unicast/group)\n\n    return {\n        ssid,\n        mac: components[0].toLowerCase(),\n        channel: components[2].split(\",\")[0],\n        security: components.splice(5).map(cleanSecurity).sort()\n    };\n}","/home/travis/build/npmtest/node-npmtest-wifiscanner/node_modules/wifiscanner/parsers/linuxparser.js":"'use strict';\n\nconst common = require('./common');\n\nmodule.exports = function parse(data) {\n    const cells = data.split(/Cell \\d{2} - /g);\n    if(~cells[0].toLocaleLowerCase().indexOf(\"scan complete\")) {\n        cells.shift();\n    }\n    return cells.map(cell => common.parseCell(cell,cellLinesToJSON));\n}\n\nfunction cellLinesToJSON(cellLines) {\n    return {\n        ssid:       cellLines.filter(findSsid).map(extractSsid)[0],\n        mac:        cellLines.filter(common.findMac).map(common.extractMac)[0],\n        channel:    cellLines.filter(findChannel).map(extractChannel)[0],\n        security:   cellLines.filter(findSecurity).map(extractSecurity)\n    };\n}\n\nfunction findSsid(line) {\n    return ~line.toLowerCase().indexOf(\"essid\");\n}\n\nfunction extractSsid(line) {\n    const ssidPattern = /\\essid:\"(.*)\\\"/gi;\n    return ssidPattern.exec(line)[1];\n}\n\nfunction findChannel(line) {\n    const channelPattern  = /Channel (\\d+)/gi;\n    return channelPattern.test(line);\n}\n\nfunction extractChannel(line) {\n    const channelPattern  = /Channel (\\d+)/gi;\n    return channelPattern.exec(line)[1];\n}\n\nfunction findSecurity(line) {\n    const encryptionPattern = /(encryption key:off|wpa(\\d)? version|wep)/gi;\n    return encryptionPattern.test(line);\n}\n\nfunction extractSecurity(line){\n    const noEncryption = /Encryption key:off/gi;\n    const wpa1 = /wpa version/gi;\n    const wpa2 = /wpa2 version/gi;\n\n    if(noEncryption.test(line))\n        return \"None\";\n    else if(wpa1.test(line))\n        return \"WPA\";\n    else if(wpa2.test(line))\n        return \"WPA2\";\n    else\n        return \"WEP\";\n}","/home/travis/build/npmtest/node-npmtest-wifiscanner/node_modules/wifiscanner/parsers/common.js":"'use strict';\r\n\r\nfunction cleanCellLine(cellLine) {\r\n    return cellLine.trim();\r\n}\r\n\r\nfunction parseCell(cell, cellLinesToJSON) {\r\n    const cellLines = cell.split(\"\\n\").map(cleanCellLine);\r\n    return cellLinesToJSON(cellLines);\r\n}\r\n\r\nfunction findMac(line){\r\n    const macPattern = /([0-9A-F]{2}[:-]){5}([0-9A-F]{2})/ig;\r\n    return macPattern.test(line.toLowerCase());\r\n}\r\n\r\nfunction extractMac(line) {\r\n    const macPattern = /([0-9A-F]{2}[:-]){5}([0-9A-F]{2})/ig;\r\n    return macPattern.exec(line.toLowerCase())[0];\r\n}\r\n\r\nmodule.exports = {\r\n    cleanCellLine,\r\n    parseCell,\r\n    findMac,\r\n    extractMac\r\n};","/home/travis/build/npmtest/node-npmtest-wifiscanner/node_modules/wifiscanner/parsers/windowsparser.js":"'use strict';\r\n\r\nconst common = require('./common');\r\n\r\nmodule.exports = function parse(data) {\r\n    let cells = data.split(/SSID \\d{1,2} : /g);\r\n    cells = cells.filter(cell => cell.indexOf(\"Interface name\") == -1)\r\n    return cells.map(cell => common.parseCell(cell, cellLinesToJSON));\r\n}\r\n\r\nfunction cellLinesToJSON(cellLines) {\r\n    return {\r\n        ssid:       cellLines[0],\r\n        mac:        cellLines.filter(common.findMac).map(common.extractMac)[0],\r\n        channel:    cellLines.filter(findChannel).map(extractChannel)[0],\r\n        security:   cellLines.map(findSecurity).filter(value => value).map(extractSecurity)\r\n    }\r\n}\r\n\r\nfunction findChannel(line) {\r\n    const channelPattern  = /Channel\\s+:?\\s+(\\d+)/gi;\r\n    return channelPattern.test(line);\r\n}\r\n\r\nfunction extractChannel(line) {\r\n    const channelPattern  = /Channel\\s+:?\\s+(\\d+)/gi;\r\n    return channelPattern.exec(line)[1];\r\n}\r\n\r\nfunction findSecurity(line, index, lines) {\r\n    if(~line.indexOf(\"Authentication\")) {\r\n        return `${lines[index]}\\n${lines[index + 1]}`;\r\n    } \r\n}\r\n\r\nfunction extractSecurity(line) {\r\n    const noEncryption = /None/gi;\r\n    const wpa1 = /wpa-/gi;\r\n    const wpa2 = /wpa2-/gi;\r\n\r\n    if(noEncryption.test(line))\r\n        return \"None\";\r\n    else if(wpa1.test(line))\r\n        return \"WPA\";\r\n    else if(wpa2.test(line))\r\n        return \"WPA2\";\r\n    else\r\n        return \"WEP\";\r\n}"}